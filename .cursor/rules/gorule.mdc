---
description: 
globs: 
alwaysApply: false
---
**Prompt para Implementación de Funcionalidad de Guardado de Mensajes de Chat en Go**

---

**Objetivo General:**  
Eres un asistente de IA experto en Go. Tu misión es implementar una funcionalidad para guardar mensajes de chat en una aplicación existente. Sigue rigurosamente las instrucciones a continuación, sin omitir ni modificar ningún detalle.

---

### 1. Arquitectura del Proyecto Backend

**Estructura de Carpetas:**  
- **Handlers y Servicios (WebSocket):**
  - `backend/internal/websocket/handlers/` → Manejadores para la recepción y procesamiento inicial de mensajes.
  - `backend/internal/websocket/services/chat_service.go` → Lógica de negocio específica para el procesamiento de mensajes de chat.
  
- **Base de Datos:**
  - `backend/internal/db/queries/` → Ubicación de las consultas SQL. Todas las nuevas consultas deben registrarse aquí, utilizando el wrapper de métricas.
  - `backend/internal/models/` → Modelos existentes para estructurar los datos.

- **Paquetes Comunes:**
  - `backend/pkg/customws/` → Gestión de conexiones WebSocket con el método `handlePeerToPeerMessage` para comunicación P2P.
  - `backend/pkg/logger/` → Sistema de logging unificado para el registro de eventos.

**Ejemplo de Estructura de Directorios:**
```
backend/
├── internal/
│   ├── websocket/
│   │   ├── services/
│   │   │   └── chat_service.go    # Lógica de procesamiento de mensajes
│   │   └── handlers/              # Manejadores de mensajes WS
│   ├── db/
│   │   └── queries/               # Consultas SQL (con métricas)
│   └── models/                    # Modelos de la base de datos
├── docs/                          # Cualquier info que se require consultar aqui
│
└── pkg/
    ├── customws/                  # Gestión de conexiones WS
    └── logger/                    # Sistema de logging
```

---

### 2. Reglas de Desarrollo para Go

**Manejo de Mensajes de Chat:**  
- **Flujo a Seguir:**  
  WebSocket → Handler → Service → Query  
- **Puntos Clave:**
  - Utiliza siempre los modelos definidos en `models.go`.
  - Al agregar nuevas consultas SQL, regístralas en `queries/queries.go`.

**Capa de Base de Datos:**  
- Asegura la compatibilidad con la sintaxis MySQL.  
- Usa el wrapper de métricas para medir consultas. Por ejemplo:
  ```go
  result, err := queries.MeasureQueryWithResult(func() (interface{}, error) {
      return queries.GetChatMessages(db, params)
  })
  ```

**WebSocket:**  
- Utiliza el paquete `customws` para la gestión de conexiones.  
- Los DTOs específicos se encuentran en `wsmodels/types.go`.  
- Toda la lógica de negocio debe implementarse en `services/chat_service.go`.

**Logging:**  
- Emplea el logger configurado para registrar todos los eventos. Ejemplo:
  ```go
  logger.Infof("CHAT", "Nuevo mensaje de usuario %d", userID)
  ```

**Patrones de Diseño:**  
- Emplea inyección de dependencias en los constructores.  
- Mantén una separación clara entre:
  - **Handlers:** Coordinación del flujo de mensajes.
  - **Services:** Implementación de la lógica de negocio.
  - **Queries:** Acceso a la base de datos.

---

### 3. Flujo de Mensajes

Utiliza el siguiente diagrama de secuencia como referencia para comprender el flujo completo:

```mermaid
sequenceDiagram
    participant WS as WebSocket
    participant H as Handler
    participant S as Service
    participant Q as Query
    participant DB as Database

    WS->>H: Mensaje entrante
    H->>S: Procesar mensaje
    S->>Q: Ejecutar consulta
    Q->>DB: Operación SQL
    DB-->>Q: Resultado
    Q-->>S: Datos
    S-->>H: Respuesta
    H-->>WS: Enviar respuesta
```

---

### 4. Política de Actualización y Reglas de Modificación

- **Al agregar nuevas funcionalidades relacionadas con chat:**
  1. **Handlers:** Crea o actualiza en `/websocket/handlers/`.
  2. **Lógica de Negocio:** Implementa o modifica la lógica en `services/`.
  3. **Consultas SQL:** Añade o actualiza consultas en `queries/queries.go`.
  4. **Modelos:** Actualiza los modelos existentes o crea nuevos en `models/`.
  5. **Documentación:** Asegúrate de documentar todos los cambios realizados en el flujo.
  6. **Comentarios:** Al modificar un archivo, coloca al inicio un resumen con comentarios que describan las reglas y requisitos específicos para ese archivo.
  7. **Comunicación P2P:** Para enviar un mensaje o información de un usuario a otro, utiliza el método `handlePeerToPeerMessage` de `customws`.

---

### 5. Estructura de "Action" y "Resource"

**Orden de Procesamiento:**  
1. Verificar primero la `action`.  
2. Luego, (excepto para "ping") verificar el `resource`.

**Combinaciones Válidas:**

- **Action: "ping"**  
  - No requiere `resource`.  
  - Es la única acción que funciona sin especificar este parámetro.

- **Action: "get_list"**  
  - `resource` puede ser:  
    - `"chat"` → Obtener lista de chats.  
    - `"notification"` → Obtener lista de notificaciones.

- **Action: "get_pending"**  
  - `resource`: `"notification"` → Obtener notificaciones pendientes.  
  - Se añade automáticamente `onlyUnread: true`.

- **Action: "get_history"**  
  - `resource`: `"chat"` → Obtener historial de chat.  
  - **Datos obligatorios:** `chatId`, `limit`, `beforeMessageId`.

- **Action: "send_message"**  
  - `resource`: `"chat"` → Enviar mensaje de chat.  
  - **Datos obligatorios:** `chatId`, `text`.

**Ejemplo de Estructura del Mensaje:**
```json
{
    "action": "get_list",    // Se verifica primero la acción
    "resource": "chat",      // Se verifica luego el recurso (excepto en "ping")
    "data": {                // Campos específicos, según la combinación
        // Ejemplo de datos específicos para la acción
    }
}
```

**Reglas Importantes Relacionadas a "Action" y "Resource":**
1. Toda acción (excepto "ping") **debe** incluir un `resource`.  
2. Si no se especifica el `resource`, se debe devolver un error 400.  
3. Las combinaciones `action`-`resource` deben coincidir *exactamente* con las especificadas.  
4. Cada combinación puede requerir datos específicos adicionales en el campo `data`.

---

### 6. Reglas Específicas Adicionales

- **Identificación de Mensajes Propios:**  
  El campo `IsMyMessage` toma el valor `1` si el mensaje es propio y `0` si es de otro usuario.

- **Roles:**  
  El único usuario con rol de administrador es el que tiene `ID: 8` (tipo `int64`).

- **Actualización de Archivos y Ejemplos en Código:**  
  Siempre que se te solicite, actualiza los archivos pertinentes para ahorrar tokens. Los ejemplos deben mostrarse directamente en el código.

---

**Instrucción Final:**  
Sigue meticulosamente todas las pautas y reglas mencionadas, sin desviar o modificar ningún requisito. Cada cambio, consulta y lógica debe implementarse de acuerdo a la estructura y directrices proporcionadas. La adherencia a estas instrucciones es obligatoria para asegurar la funcionalidad correcta y la cohesión del proyecto.
